[{"path":"https://maxikuehn.github.io/steamr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 steamr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://maxikuehn.github.io/steamr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maximilian Kühn. Author, maintainer. Cedric Mingham. Author. Katharina Salewski. Author.","code":""},{"path":"https://maxikuehn.github.io/steamr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kühn M, Mingham C, Salewski K (2025). steamr: Visualising processing video game data steam. R package version 0.1.0, https://maxikuehn.github.io/steamr/, https://github.com/maxikuehn/steamr.","code":"@Manual{,   title = {steamr: Visualising and processing video game data from steam},   author = {Maximilian Kühn and Cedric Mingham and Katharina Salewski},   year = {2025},   note = {R package version 0.1.0, https://maxikuehn.github.io/steamr/},   url = {https://github.com/maxikuehn/steamr}, }"},{"path":"https://maxikuehn.github.io/steamr/index.html","id":"steamr","dir":"","previous_headings":"","what":"Visualising and processing video game data from steam","title":"Visualising and processing video game data from steam","text":"goal steamr visualize process video game data steam.","code":""},{"path":"https://maxikuehn.github.io/steamr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visualising and processing video game data from steam","text":"can install development version steamr GitHub :","code":"# install.packages(\"pak\") pak::pak(\"maxikuehn/steamr\")"},{"path":"https://maxikuehn.github.io/steamr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Visualising and processing video game data from steam","text":"basic example shows solve common problem: special using README.Rmd instead just README.md? can include R chunks like : ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . can also embed plots, example:  case, don’t forget commit push resulting figure files, display GitHub CRAN.","code":"library(steamr) ## basic example code summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00"},{"path":"https://maxikuehn.github.io/steamr/reference/addyear.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to analyse date column in the dataset and add a column containing only the year — addyear","title":"Function to analyse date column in the dataset and add a column containing only the year — addyear","text":"Function analyse date column dataset add column containing year","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/addyear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to analyse date column in the dataset and add a column containing only the year — addyear","text":"","code":"addyear(games)"},{"path":"https://maxikuehn.github.io/steamr/reference/addyear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to analyse date column in the dataset and add a column containing only the year — addyear","text":"games \"games\" dataset","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/addyear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to analyse date column in the dataset and add a column containing only the year — addyear","text":"games \"games\" dataset added column \"year\"","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/avgpriceperyear.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to visualise the average game price per year Genres include: Action, Adventure, Casual, Indie, MassivelyMultiplayer, Racing, RPG, Simulation, Sports, Strategy — avgpriceperyear","title":"Function to visualise the average game price per year Genres include: Action, Adventure, Casual, Indie, MassivelyMultiplayer, Racing, RPG, Simulation, Sports, Strategy — avgpriceperyear","text":"Function visualise average game price per year Genres include: Action, Adventure, Casual, Indie, MassivelyMultiplayer, Racing, RPG, Simulation, Sports, Strategy","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/avgpriceperyear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to visualise the average game price per year Genres include: Action, Adventure, Casual, Indie, MassivelyMultiplayer, Racing, RPG, Simulation, Sports, Strategy — avgpriceperyear","text":"","code":"avgpriceperyear(games, selectedgenres = NULL)"},{"path":"https://maxikuehn.github.io/steamr/reference/avgpriceperyear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to visualise the average game price per year Genres include: Action, Adventure, Casual, Indie, MassivelyMultiplayer, Racing, RPG, Simulation, Sports, Strategy — avgpriceperyear","text":"games \"games\" dataset selectedgenres Vector genres visualised, OPTIONAL (genres selected parameter provided)","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/avgpriceperyear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to visualise the average game price per year Genres include: Action, Adventure, Casual, Indie, MassivelyMultiplayer, Racing, RPG, Simulation, Sports, Strategy — avgpriceperyear","text":"avgpriceplot ggplot object","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/games.html","id":null,"dir":"Reference","previous_headings":"","what":"Steam Game Data — games","title":"Steam Game Data — games","text":"Subset game details Steam API Huggingface dataset.","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/games.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Steam Game Data — games","text":"","code":"games"},{"path":"https://maxikuehn.github.io/steamr/reference/games.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Steam Game Data — games","text":"data frame 500 rows 11 variables: app_id Unique Steam ID name Game name description Short game description image Image URL developers, publishers Game developers publishers price Price EUR metacritic Metacritic score genres Game genres (comma-separated) recommendations Number recommendations release_date Game release date","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/games.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Steam Game Data — games","text":"Huggingface: FronkonGames/steam-games-dataset Steam API https://store.steampowered.com/api/appdetails?appids=AppID","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/separatebygenre.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to separate rows with multiple genres into multiple rows — separatebygenre","title":"Function to separate rows with multiple genres into multiple rows — separatebygenre","text":"Function separate rows multiple genres multiple rows","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/separatebygenre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to separate rows with multiple genres into multiple rows — separatebygenre","text":"","code":"separatebygenre(games)"},{"path":"https://maxikuehn.github.io/steamr/reference/separatebygenre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to separate rows with multiple genres into multiple rows — separatebygenre","text":"games \"games\" dataset","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/separatebygenre.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to separate rows with multiple genres into multiple rows — separatebygenre","text":"games \"games\" dataset rows separated genres","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/steamr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"steamr: Visualising and processing video game data from steam — steamr-package","title":"steamr: Visualising and processing video game data from steam — steamr-package","text":"TODO expand function information: package can take data steam api (dataframe) offers several ways processing data.","code":""},{"path":[]},{"path":"https://maxikuehn.github.io/steamr/reference/steamr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"steamr: Visualising and processing video game data from steam — steamr-package","text":"Maintainer: Maximilian Kühn 3009677@stud.hs-mannheim.de Authors: Cedric Mingham 2021650@stud.hs-mannheim.de Katharina Salewski 1911459@stud.hs-mannheim.de","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/str_arr_to_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to manually parse a serialized str array into a R vector. If the array has no (valid) elements, NULL is returned. If the string s is a non-array sequence, the sequence is returned as a single element — str_arr_to_vector","title":"Function to manually parse a serialized str array into a R vector. If the array has no (valid) elements, NULL is returned. If the string s is a non-array sequence, the sequence is returned as a single element — str_arr_to_vector","text":"Function manually parse serialized str array R vector. array (valid) elements, NULL returned. string s non-array sequence, sequence returned single element","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/str_arr_to_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to manually parse a serialized str array into a R vector. If the array has no (valid) elements, NULL is returned. If the string s is a non-array sequence, the sequence is returned as a single element — str_arr_to_vector","text":"","code":"str_arr_to_vector(s)"},{"path":"https://maxikuehn.github.io/steamr/reference/str_arr_to_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to manually parse a serialized str array into a R vector. If the array has no (valid) elements, NULL is returned. If the string s is a non-array sequence, the sequence is returned as a single element — str_arr_to_vector","text":"s string containing array like ['', 'B']","code":""},{"path":"https://maxikuehn.github.io/steamr/reference/str_arr_to_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to manually parse a serialized str array into a R vector. If the array has no (valid) elements, NULL is returned. If the string s is a non-array sequence, the sequence is returned as a single element — str_arr_to_vector","text":"spl vector elements","code":""}]
